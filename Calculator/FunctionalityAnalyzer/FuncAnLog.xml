<?xml version="1.0" encoding="utf-8"?>
<report>FuncAnReport<class>Number<field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Double get_Value()</method><method>Void set_Value(Double)</method><method>Calculator.Logic.Token Clone()</method><method>System.String Draw()</method><method>Double Evaluate()</method></class><class>Operand<field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Double get_Value()</method><method>Void set_Value(Double)</method><method>Double Evaluate()</method><method>Calculator.Logic.Token Clone()</method><method>System.String Draw()</method></class><class>Variable<field>System.String Name</field><field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Double get_Value()</method><method>Void set_Value(Double)</method><method>Calculator.Logic.Token Clone()</method><method>System.String Draw()</method><method>Double Evaluate()</method></class><class>Plus<field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Int32 Search(System.String, Int32)</method><method>Calculator.Logic.Token Clone()</method><method>System.String Draw()</method><method>Void Perform(MyLibrary.MyStack`1[Calculator.Logic.Operand])</method><method>Void PushOperands(MyLibrary.MyStack`1[Calculator.Logic.Operand], MyLibrary.Node`1[Calculator.Logic.Operand] ByRef)</method><method>Int32 get_OperandCount()</method><method>Double Evaluate()</method></class><class>Minus<field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Int32 Search(System.String, Int32)</method><method>Calculator.Logic.Token Clone()</method><method>System.String Draw()</method><method>Void Perform(MyLibrary.MyStack`1[Calculator.Logic.Operand])</method><method>Void PushOperands(MyLibrary.MyStack`1[Calculator.Logic.Operand], MyLibrary.Node`1[Calculator.Logic.Operand] ByRef)</method><method>Int32 get_OperandCount()</method><method>Double Evaluate()</method></class><class>Multiply<field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Int32 Search(System.String, Int32)</method><method>Calculator.Logic.Token Clone()</method><method>System.String Draw()</method><method>Void Perform(MyLibrary.MyStack`1[Calculator.Logic.Operand])</method><method>Void PushOperands(MyLibrary.MyStack`1[Calculator.Logic.Operand], MyLibrary.Node`1[Calculator.Logic.Operand] ByRef)</method><method>Int32 get_OperandCount()</method><method>Double Evaluate()</method></class><class>Divide<field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Int32 Search(System.String, Int32)</method><method>Calculator.Logic.Token Clone()</method><method>System.String Draw()</method><method>Void Perform(MyLibrary.MyStack`1[Calculator.Logic.Operand])</method><method>Void PushOperands(MyLibrary.MyStack`1[Calculator.Logic.Operand], MyLibrary.Node`1[Calculator.Logic.Operand] ByRef)</method><method>Int32 get_OperandCount()</method><method>Double Evaluate()</method></class><class>UnaryOp<field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Void Perform(MyLibrary.MyStack`1[Calculator.Logic.Operand])</method><method>Void PushOperands(MyLibrary.MyStack`1[Calculator.Logic.Operand], MyLibrary.Node`1[Calculator.Logic.Operand] ByRef)</method><method>Int32 get_OperandCount()</method><method>Double Evaluate()</method><method>Int32 Search(System.String, Int32)</method><method>Calculator.Logic.Token Clone()</method><method>System.String Draw()</method></class><class>BinaryOp<field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Void Perform(MyLibrary.MyStack`1[Calculator.Logic.Operand])</method><method>Void PushOperands(MyLibrary.MyStack`1[Calculator.Logic.Operand], MyLibrary.Node`1[Calculator.Logic.Operand] ByRef)</method><method>Int32 get_OperandCount()</method><method>Double Evaluate()</method><method>Int32 Search(System.String, Int32)</method><method>Calculator.Logic.Token Clone()</method><method>System.String Draw()</method></class><class>Factorial<field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Int32 Search(System.String, Int32)</method><method>Calculator.Logic.Token Clone()</method><method>System.String Draw()</method><method>Void Perform(MyLibrary.MyStack`1[Calculator.Logic.Operand])</method><method>Void PushOperands(MyLibrary.MyStack`1[Calculator.Logic.Operand], MyLibrary.Node`1[Calculator.Logic.Operand] ByRef)</method><method>Int32 get_OperandCount()</method><method>Double Evaluate()</method></class><class>Expression<field>Calculator.Logic.Token Root</field><method>System.String Draw()</method><method>Calculator.Logic.Expression Clone()</method><method>Double Calculate()</method><method>System.String Process()</method></class><class>Operator<field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Int32 get_OperandCount()</method><method>Void PushOperands(MyLibrary.MyStack`1[Calculator.Logic.Operand], MyLibrary.Node`1[Calculator.Logic.Operand] ByRef)</method><method>Void Perform(MyLibrary.MyStack`1[Calculator.Logic.Operand])</method><method>Double Evaluate()</method><method>Int32 Search(System.String, Int32)</method><method>Calculator.Logic.Token Clone()</method><method>System.String Draw()</method></class><class>Subtree<field>Calculator.Logic.Expression tree</field><field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Double get_Value()</method><method>Void set_Value(Double)</method><method>Calculator.Logic.Token Clone()</method><method>System.String Draw()</method><method>Double Evaluate()</method></class><class>Priorities<field>System.Int32 value__</field><field>Calculator.Logic.Priorities assign</field><field>Calculator.Logic.Priorities plus</field><field>Calculator.Logic.Priorities mult</field><field>Calculator.Logic.Priorities degree</field><field>Calculator.Logic.Priorities factorial</field><field>Calculator.Logic.Priorities operand</field><method>Boolean Equals(System.Object)</method><method>Int32 GetHashCode()</method><method>System.String ToString()</method><method>System.String ToString(System.String, System.IFormatProvider)</method><method>Int32 CompareTo(System.Object)</method><method>System.String ToString(System.String)</method><method>System.String ToString(System.IFormatProvider)</method><method>Boolean HasFlag(System.Enum)</method><method>System.TypeCode GetTypeCode()</method></class><class>BuiltInFunc<field>System.String name</field><field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Void SetArguments(System.String)</method><method>Calculator.Logic.Token Clone()</method><method>Double Evaluate()</method><method>System.String Draw()</method></class><class>MinBIF<field>System.String name</field><field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Calculator.Logic.Token Clone()</method><method>Double Evaluate()</method><method>System.String Draw()</method><method>Void SetArguments(System.String)</method></class><class>SqrtBIF<field>System.String name</field><field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Calculator.Logic.Token Clone()</method><method>Double Evaluate()</method><method>System.String Draw()</method><method>Void SetArguments(System.String)</method></class><class>MaxBIF<field>System.String name</field><field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Calculator.Logic.Token Clone()</method><method>Double Evaluate()</method><method>System.String Draw()</method><method>Void SetArguments(System.String)</method></class><class>UserFunc<field>System.String Name</field><field>System.String Content</field><field>System.Int32 Priority</field><field>System.Int32 branchCount</field><field>Calculator.Logic.Token Ancestor</field><field>Calculator.Logic.Token[] Arguments</field><field>System.Int32 Index</field><method>Calculator.Logic.Token Clone()</method><method>Double Evaluate()</method><method>System.String Draw()</method></class><class>ExpressionParser<method>Calculator.Logic.ParsingResult Run(System.String)</method></class><class>Assignment<method>System.String Process()</method></class><class>AssignmentParser<method>Calculator.Logic.ParsingResult Run(System.String)</method></class><class>Block<method>Int32 get_Count()</method><method>System.String Process()</method></class><class>BlockParser<method>Calculator.Logic.ParsingResult Run(System.String)</method></class><class>Lambda<field>System.String Name</field><method>System.String Process()</method></class><class>LambdaParser<method>Calculator.Logic.ParsingResult Run(System.String)</method></class><class>Declaration<field>System.String alias</field><field>System.String Keyword</field><method>System.String Process()</method></class><class>DeclarationParser<method>Calculator.Logic.ParsingResult Run(System.String)</method><method>Int32 FindDeclaration(System.String, Int32)</method><method>Int32 FindDeclaration(System.String, Calculator.Logic.ParsingResult ByRef)</method></class></report>